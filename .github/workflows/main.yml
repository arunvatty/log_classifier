name: Log Classifier CI/CD with AWS Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest httpx
        
    - name: Download NLTK data
      run: |
        python -c "import nltk; nltk.download('punkt'); nltk.download('punkt_tab')"
        
    - name: Run tests
      run: |
        pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/log-classifier:latest,${{ secrets.DOCKER_HUB_USERNAME }}/log-classifier:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/log-classifier:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/log-classifier:buildcache,mode=max
    
    # Save the image tag for use in the deployment job
    - name: Set output
      id: vars
      run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to EC2
      run: |
        # Connect to EC2 and deploy the container
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
          fi
          
          # Login to Docker Hub
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          
          # Pull the latest image
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/log-classifier:latest
          
          # Stop and remove existing container if any
          if sudo docker ps -a | grep -q log-classifier; then
            sudo docker stop log-classifier
            sudo docker rm log-classifier
          fi
          
          # Run the new container
          sudo docker run -d \
            --name log-classifier \
            -p 8000:8000 \
            --restart unless-stopped \
            ${{ secrets.DOCKER_HUB_USERNAME }}/log-classifier:latest
          
          # Verify deployment
          echo "Container is running: $(sudo docker ps | grep log-classifier)"
        EOF
    
    - name: Health check
      run: |
        # Wait a bit for container to start
        sleep 15
        
        # Check if API is responding
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "curl -s http://localhost:8000/ || echo 'Health check failed'"
        
    - name: Configure AWS credentials (for API Gateway)
      if: ${{ secrets.AWS_API_GATEWAY_ENABLED == 'true' }}
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update API Gateway
      if: ${{ secrets.AWS_API_GATEWAY_ENABLED == 'true' }}
      run: |
        # Get the current EC2 public IP
        EC2_IP=$(ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "curl -s http://169.254.169.254/latest/meta-data/public-ipv4")
        
        # Update API Gateway integration URL
        aws apigatewayv2 update-integration \
          --api-id ${{ secrets.API_GATEWAY_ID }} \
          --integration-id ${{ secrets.API_GATEWAY_INTEGRATION_ID }} \
          --integration-uri http://${EC2_IP}:8000 \
          --timeout-in-millis 30000
          
        echo "Updated API Gateway integration to point to ${EC2_IP}:8000"